(in package "ACL2")
(program)
(include-book "proof-checker")

(defun rules ()
'((a1 (=> (=> P Q) (=> (not Q) (not P))))
(a2 (=> (and (or P Q) (not P)) Q))
(a3 (=> (and (or P Q) (not Q)) P))
(a4 (=> P (not (not P))))
(a5 (=> (not (not P)) P))
(a6 (=> (and P Q) P))
(a7 (=> (and P Q) Q))
(a8 (=> (and (=> P Q) (=> Q R)) (=> P R)))
(a9 (=> P (or P Q)))
(b1 (=> (not (and P Q)) (or (not P) (not Q))))
(b2 (=> (not (or P Q)) (and (not Q) (not P))))
(c1 (=> (not (or P (not Q))) (and (not P) Q)))
(b3 (=> (and P Q) (not (or (not P) (not Q)))))
(b4 (=> (or P Q) (not (and (not P) (not Q)))))
(b5 (=> (or P P) P))
(b6 (=> (and (and (or P Q) (=> P R)) (=> Q S)) (or R S)))
(b7 (=> (and P Q) (and Q P)))
(b8 (=> (or Q P) (or P Q)))
(x1 (=> (and P (=> P Q)) Q))
(xx1 (=> P P))))
(defun assumptions ()
'((r1 (or C (not (or D (not E)))))
(r2 (=> E (and B A)))
(r3 (not C))))
(defun constants ()
 nil)
(defun required ()
 nil)
(defun goal ()
nil)
(defun proof ()
 nil)
(verify-proof "/private/var/folders/dm/6qlqwb4964j96bfb22spwwz00000gn/T/11196-1837-1i98ms6" (goal) (assumptions) (rules) (proof) (constants) (required) 0)
